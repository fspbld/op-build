From 74174ead2ad7e6191e8ae98cac7921361dd249b3 Mon Sep 17 00:00:00 2001
From: Benjamin Weisenbeck <bweisenb@us.ibm.com>
Date: Tue, 13 Oct 2015 12:38:24 -0500
Subject: [PATCH] Skip unnecessary firdata collection for EX targets

The EX global checkstop register includes bits that only indicate an
external checkstop from other chip/chiplets. We won't include those targets
in the firdata capture if those are the only bits set. Also removing some
padding that was added with the mistaken intention to allow for ECC bytes.

Change-Id: Ia2ad57554af878f578445d3c58d80a2973fe913c
CQ: SW324401
Reviewed-on: http://gfw160.aus.stglabs.ibm.com:8080/gerrit/21135
Reviewed-by: Daniel M. Crowell <dcrowell@us.ibm.com>
Tested-by: FSP CI Jenkins
Reviewed-by: William A. Bryan <wilbryan@us.ibm.com>
---
 src/occ/firdata/firData.c | 11 +++++++----
 1 file changed, 7 insertions(+), 4 deletions(-)

diff --git a/src/occ/firdata/firData.c b/src/occ/firdata/firData.c
index 6fb1906..e58bcdd 100644
--- a/src/occ/firdata/firData.c
+++ b/src/occ/firdata/firData.c
@@ -126,6 +126,9 @@ bool FirData_addRegToPnor( FirData_t * io_fd, PNOR_Trgt_t * io_pTrgt,
         }
 
         if ( 0 == reg.val ) break; // Skip zero value registers.
+        if ( (i_addr == 0x10040000) && ((reg.val & 0x1FFFFFFFFFFFFFFF) == 0) )
+            break; // Special case to ignore bits in core global checkstop
+                   // that only indicate a checkstop from other chip/chiplets
 
         full = FirData_addDataToPnor( io_fd, &reg, sizeof(reg) );
         if ( full ) break;
@@ -601,7 +604,7 @@ int32_t FirData_init( FirData_t * io_fd,
     int32_t rc = SUCCESS;
 
     size_t sz_hData    = sizeof(HOMER_Data_t);
-    size_t sz_pnoNoEcc = 0;
+    size_t sz_pnorNoEcc = 0;
     size_t sz_u32      = sizeof(uint32_t);
     size_t sz_u64      = sizeof(uint64_t);
 
@@ -650,9 +653,9 @@ int32_t FirData_init( FirData_t * io_fd,
 
         /* The actual maximum PNOR size may possibly be less then the PNOR data */
         /* buffer. If so, adjust maximum size. */
-        sz_pnoNoEcc = (io_fd->hData->pnorInfo.pnorSize / 9) * 8;
-        if ( sz_pnoNoEcc < io_fd->maxPBufSize )
-            io_fd->maxPBufSize = sz_pnoNoEcc;
+        sz_pnorNoEcc = io_fd->hData->pnorInfo.pnorSize;
+        if ( sz_pnorNoEcc < io_fd->maxPBufSize )
+            io_fd->maxPBufSize = sz_pnorNoEcc;
 
         /* Initialize the PNOR header data. */
         full = FirData_addDataToPnor( io_fd, &pData, sizeof(pData) );

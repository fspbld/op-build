From 6219ff21f63ee53fe4ff7b4524472bdd61b0bd15 Mon Sep 17 00:00:00 2001
From: "B. Rafanello" <brafanel@us.ibm.com>
Date: Tue, 9 Feb 2016 16:12:06 -0600
Subject: [PATCH] SW328077: Missing SEL for eSEL for Platform Checkstop

The problem here is that, for a platform checkstop event, the eSEL
is being generated but the SEL is not always generated. Instrumenting
the code revealed a race condition between shutdown and the
launching of the thread which transmits the SEL to the BMC. When
the communication thread to the BMC is launched, it will register
for shutdown notification and become part of the shutdown process.
In this case, it will have an opportunity to send everything in its
queue to the BMC as part of the shutdown process itself. If
shutdown starts before the communication thread can register for
shutdown notification, then it will be blocked trying to register
for shutdown notificaiton (the shutdown thread holds the mutex on
the registration queue until shutdown completes) and will not be
able to send the contents of its queue to the BMC. This fix
attempts to ensure that the communication thread is started and
registered for shutdown notification before shutdown is called.
Please note that, in this case, shutdown is being called from
istepdispatcher, not from the error manager (the normal case).
There is already a synchronization mechanism between the error
manager and the communication thread to prevent this race condition.
This fix attempts to leverage that existing mechanism.

Change-Id: I7f21fc6a9e21227913dfcd6885d27b065b53c6bc
CQ:SW328077
Reviewed-on: http://gfw160.aus.stglabs.ibm.com:8080/gerrit/24135
Tested-by: Jenkins Server
Tested-by: Jenkins OP Build CI
Tested-by: Jenkins OP HW
Reviewed-by: MATTHEW A. PLOETZ <maploetz@us.ibm.com>
Tested-by: FSP CI Jenkins
Reviewed-by: ANDRES A. LUGO-REYES <aalugore@us.ibm.com>
Reviewed-by: Daniel M. Crowell <dcrowell@us.ibm.com>
---
 src/usr/initservice/istepdispatcher/istepdispatcher.C | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/src/usr/initservice/istepdispatcher/istepdispatcher.C b/src/usr/initservice/istepdispatcher/istepdispatcher.C
index aaf476f..9716790 100644
--- a/src/usr/initservice/istepdispatcher/istepdispatcher.C
+++ b/src/usr/initservice/istepdispatcher/istepdispatcher.C
@@ -5,7 +5,7 @@
 /*                                                                        */
 /* OpenPOWER HostBoot Project                                             */
 /*                                                                        */
-/* Contributors Listed Below - COPYRIGHT 2011,2015                        */
+/* Contributors Listed Below - COPYRIGHT 2011,2016                        */
 /* [+] International Business Machines Corp.                              */
 /*                                                                        */
 /*                                                                        */
@@ -70,6 +70,10 @@
 #include <config.h>
 #include <ipmi/ipmisensor.H>
 
+#ifdef CONFIG_BMC_IPMI
+#include <ipmi/ipmisel.H>
+#endif
+
 #include <initservice/bootconfigif.H>
 
 namespace ISTEPS_TRACE
@@ -1318,6 +1322,12 @@ void IStepDispatcher::handleShutdownMsg(msg_t * & io_pMsg)
 // ----------------------------------------------------------------------------
 void IStepDispatcher::shutdownDuringIpl()
 {
+
+#ifdef CONFIG_BMC_IPMI
+    /* Ensure the ipmiSEL thread is running and registered with doShutdown. */
+    Singleton<IpmiSEL>::instance().msgQueue();
+#endif
+
     TRACFCOMP(g_trac_initsvc, ENTER_MRK"IStepDispatcher::shutdownDuringIpl");
 
     // Create and commit error log for FFDC and call doShutdown with the RC
@@ -1360,6 +1370,7 @@ void IStepDispatcher::shutdownDuringIpl()
             SHUTDOWN_NOT_RECONFIG_LOOP,
             this->iv_curIStep, this->iv_curSubStep);
 
+
         errlCommit(err, INITSVC_COMP_ID);
         INITSERVICE::doShutdown(SHUTDOWN_NOT_RECONFIG_LOOP);
     }

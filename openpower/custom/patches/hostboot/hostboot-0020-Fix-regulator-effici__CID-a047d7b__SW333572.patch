From a047d7b9c7ec19312c3f937e3daedd9434c9ed35 Mon Sep 17 00:00:00 2001
From: Chris Cain <cjcain@us.ibm.com>
Date: Fri, 29 Jan 2016 10:57:45 -0600
Subject: [PATCH] Fix regulator efficiency for memory throttling

Change-Id: Iaddb8a10baeb70103f67d2f0f854ac68365f7d8a
CQ: SW333572
Forwardport: yes
Reviewed-on: http://gfw160.aus.stglabs.ibm.com:8080/gerrit/23780
Reviewed-by: WILLIAM G. HOFFA <wghoffa@us.ibm.com>
Tested-by: Jenkins Server
Tested-by: Jenkins OP Build CI
Tested-by: Jenkins OP HW
Tested-by: FSP CI Jenkins
Reviewed-by: Martha Broyles <mbroyles@us.ibm.com>
Reviewed-by: Daniel M. Crowell <dcrowell@us.ibm.com>
---
 src/usr/htmgt/htmgt_memthrottles.C | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

diff --git a/src/usr/htmgt/htmgt_memthrottles.C b/src/usr/htmgt/htmgt_memthrottles.C
index 2fd0e6c..f731a98 100644
--- a/src/usr/htmgt/htmgt_memthrottles.C
+++ b/src/usr/htmgt/htmgt_memthrottles.C
@@ -5,7 +5,7 @@
 /*                                                                        */
 /* OpenPOWER HostBoot Project                                             */
 /*                                                                        */
-/* Contributors Listed Below - COPYRIGHT 2014,2015                        */
+/* Contributors Listed Below - COPYRIGHT 2014,2016                        */
 /* [+] International Business Machines Corp.                              */
 /*                                                                        */
 /*                                                                        */
@@ -324,7 +324,7 @@ void memPowerThrottleRedPower(TargetHandleList & i_mbas,
 {
     Target* sys = NULL;
     TargetHandleList::iterator mba;
-    uint16_t power = 0;
+    uint32_t power = 0;
     uint32_t wattTarget = 0;
     uint32_t nChip = 0;
     uint32_t nMBA = 0;
@@ -337,10 +337,10 @@ void memPowerThrottleRedPower(TargetHandleList & i_mbas,
     power = sys->getAttr<ATTR_OPEN_POWER_N_PLUS_ONE_MAX_MEM_POWER_WATTS>();
     power *= 100; //centiWatts
 
-    //Account for the regulator efficiency, if supplied
+    //Account for the regulator efficiency (percentage), if supplied
     if (i_efficiency != 0)
     {
-        power *= i_efficiency;
+        power = (power * i_efficiency) / 100;
     }
 
     //Find the Watt target for each MBA
@@ -404,7 +404,7 @@ void memPowerThrottleOverSub(TargetHandleList & i_mbas,
 {
     Target* sys = NULL;
     TargetHandleList::iterator mba;
-    uint16_t power = 0;
+    uint32_t power = 0;
     uint32_t wattTarget = 0;
     uint32_t nChip = 0;
     uint32_t nMBA = 0;
@@ -417,10 +417,10 @@ void memPowerThrottleOverSub(TargetHandleList & i_mbas,
     power = sys->getAttr<ATTR_OPEN_POWER_N_MAX_MEM_POWER_WATTS>();
     power *= 100; //centiWatts
 
-    //Account for the regulator efficiency, if supplied
+    //Account for the regulator efficiency (percentage), if supplied
     if (i_efficiency != 0)
     {
-        power *= i_efficiency;
+        power = (power * i_efficiency) / 100;
     }
 
     //Find the Watt target for each MBA
@@ -487,7 +487,7 @@ void calcMemThrottles()
     TMGT_INF("calcMemThrottles: Using nSafeModeMBA=0x%X, nSafeModeChip=0x%X",
              nSafeModeMBA, nSafeModeChip);
 
-    TMGT_INF("calcMemThrottles: Using utilization=0x%X, efficiency=0x%X",
+    TMGT_INF("calcMemThrottles: Using utilization=%d, efficiency=%d percent",
              utilization, efficiency);
 
 
